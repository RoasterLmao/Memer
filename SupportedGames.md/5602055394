if shared.MemerPrivate and not isfolder("memerprivate") then
	(makefolder or make_folder or createfolder or create_folder)("memerprivate")
end

if (shared.MemerPrivate) then
	return loadstring((readfile or read_file or getfilesource or get_file_source or get_filesource or getfile_source)("memerprivate/"..tostring(game.PlaceId)))
end

for i,v in next, (get_gc or getgc)(true) do
	if typeof(v) == "table" and rawget(v, "DoThings") then
		v.DoThings = function() end
	elseif typeof(v) == "table" and rawget(v, "dothings") then
		v.dothings = function() end
	end
end

local oldrequire = require
local require = function(modulenameorinstance, path)
	if type(modulenameorinstance) == "userdata" then
		return oldrequire(modulenameorinstance)
	elseif type(modulenameorinstance) ~= "userdata" and type(modulenameorinstance) == "string" then
		if path and type(path) == "userdata" and path:IsDescendantOf(game) then
			local oldrequire = require
			local require = function(modulenameorinstance, path)
				if type(modulenameorinstance) == "userdata" then
					return oldrequire(modulenameorinstance)
				elseif type(modulenameorinstance) ~= "userdata" and type(modulenameorinstance) == "string" then
					if path and type(path) == "userdata" and path:IsDescendantOf(game) then
						for i, v in pairs(path:GetDescendants()) do
							if v:IsA("ModuleScript") and v.Name:find(modulenameorinstance) then
								return oldrequire(v), true
							end
						end
					elseif not path then
						for i, v in pairs(game:GetDescendants()) do
							if v:IsA("ModuleScript") and v.Name:find(modulenameorinstance) then
								return oldrequire(v), true
							end
						end
					end
				end

				return {["failed"] = true, ["error-message"] = "Failed to find the module script!"}, false
			end
		end
	end
end

local Flamework = {}

function WaitForHumanoid(entity)
	repeat wait() until entity:FindFirstChildWhichIsA("Humanoid")
	return entity:FindFirstChildWhichIsA("Humanoid")
end

function Flamework.runfunction(f)
	local fl = {}
	fl.andThen = function(f)
		if f and type(f) == "function" then
			f()
			return fl
		end
	end
	fl.await = function(args)
		if args["1"] == "typed" then
			args["2"].Chatted:wait()
			args["3"]()
		elseif args["1"] == "characteradded" then
			args["2"].CharacterAdded:wait()
			args["3"]()
		elseif args["1"] == "hashumanoid" then
			WaitForHumanoid(args["2"].Character)
		elseif args["1"] == "healthchanged" then
			args["2"].Character:FindFirstChildWhichIsA("Humanoid").HealthChanged:wait()
		elseif args["1"] == "death" then
			args["2"].Character:FindFirstChildWhichIsA("Humanoid").Died:wait()
		end
		return fl
	end
	if f and type(f) == "function" then
		f()
	end
	return fl
end

function Flamework.await(args)
	local fl = {}
	fl.await = function(args)
		if args["1"] == "typed" then
			args["2"].Chatted:wait()
			args["3"]()
		elseif args["1"] == "characteradded" then
			args["2"].CharacterAdded:wait()
			args["3"]()
		elseif args["1"] == "hashumanoid" then
			WaitForHumanoid(args["2"].Character)
		elseif args["1"] == "healthchanged" then
			args["2"].Character:FindFirstChildWhichIsA("Humanoid").HealthChanged:wait()
		elseif args["1"] == "death" then
			args["2"].Character:FindFirstChildWhichIsA("Humanoid").Died:wait()
		end
		return fl
	end
	fl.andThen = function(f)
		if f and type(f) == "function" then
			f()
			return fl
		end
	end
	fl.await = function(args)
		if args["1"] == "typed" then
			args["2"].Chatted:wait()
			args["3"]()
		elseif args["1"] == "characteradded" then
			args["2"].CharacterAdded:wait()
			args["3"]()
		elseif args["1"] == "hashumanoid" then
			WaitForHumanoid(args["2"].Character)
		elseif args["1"] == "healthchanged" then
			args["2"].Character:FindFirstChildWhichIsA("Humanoid").HealthChanged:wait()
		elseif args["1"] == "death" then
			args["2"].Character:FindFirstChildWhichIsA("Humanoid").Died:wait()
		end
		return fl
	end
	return fl
end

local LocalPlayer
local UIS = game:GetService("UserInputService")

Flamework.runfunction(function()
	LocalPlayer = {}
	LocalPlayer["instance"] = game.Players.LocalPlayer
	LocalPlayer["entity"] = LocalPlayer["instance"]["Character"]
	LocalPlayer["displayname"] = LocalPlayer["instance"]["DisplayName"]
	LocalPlayer["userid"] = LocalPlayer["instance"]["UserId"]
	LocalPlayer["name"] = LocalPlayer["instance"]["Name"]
	LocalPlayer["entityadded"] = LocalPlayer["instance"].CharacterAdded
	LocalPlayer["entityremoved"] = LocalPlayer["instance"].CharacterRemoving
	LocalPlayer["isalive"] = false
	LocalPlayer["virtualpress"] = function(key, keyup_delay)
		local virtualuser = game:GetService("VirtualUser")
		virtualuser:SetKeyDown(key)
		if keyup_delay and type(keyup_delay) == "number" then
			wait(keyup_delay)
		end
		virtualuser:SetKeyUp(key)
	end
	LocalPlayer["typekey"] = function(key)
		local virtualuser = game:GetService("VirtualUser")
		virtualuser:TypeKey(key)
	end
	LocalPlayer["is_typing"] = false


	game:GetService("RunService").Stepped:Connect(function(dt)
		if LocalPlayer.entity and LocalPlayer.entity:FindFirstChildWhichIsA("Humanoid") and LocalPlayer.entity:FindFirstChildWhichIsA("Humanoid").Health >= 1 then
			LocalPlayer.isalive = true
		else
			LocalPlayer.isalive = false
		end
		if not LocalPlayer.entity then
			LocalPlayer.isalive = false
		end
		if UIS:GetFocusedTextBox() then
			LocalPlayer.is_typing = true
		elseif not UIS:GetFocusedTextBox() then
			LocalPlayer.is_typing = false
		end
		if LocalPlayer.instance.Character then
			LocalPlayer.entity = LocalPlayer.instance.Character
		end
	end)
end)

local memer, getfuncs, run

Flamework.runfunction(function()
	run = function()
		task.spawn(function()
			Flamework.await({["1"]="characteradded",["2"]=LocalPlayer.instance,["3"]=function()
				memer["Framework"] = LocalPlayer.instance.PlayerGui:FindFirstChildWhichIsA("LocalScript")
			end});
			return memer["Framework"]
		end)
	end
	memer = {
		["Framework"] = LocalPlayer.instance.PlayerGui:FindFirstChildWhichIsA("LocalScript"),
		["Combat"] = {
			["Aiming"] = {
				["Bodypart"] = "",
				["Prediction"] = 1,
				["AutoPredict"] = false,
				["WallCheck"] = false,
				["IgnoreYVelocity"] = false,
			},
			["Aimlock"] = {
				["Enabled"] = false,
				["MoveCursor"] = false,
			},
			["AutoStomp"] = {
				["Enabled"] = false,
			},
			["LegitAutoSprint"] = {
				["Enabled"] = false,
			},
			["FakeMacro"] = {
				['Enabled'] = false
			}
		},
		["Blatant"] = {
			["Speed"] = {
				["Enabled"] = false,
				["Speed"] = 2,
				["Type"] = "CFrame", -- CFrame, Velocity, Heatseeker, NoPrediction, CFrameOG
			},
			["Fly"] = {
				["Enabled"] = false,
				["Type"] = "CFrame"
			},
			["HighJump"] = {
				["Enabled"] = false,
				["Distance"] = 50
			},
			["AntiStomp"] = {
				["Enabled"] = false,
				["Type"] = "Fast" -- Fast, Slow
			},
			["AntiSlow"] = {
				["Enabled"] = false,
				["SlowJumping"] = false,
			},
			["GunStrafe"] = {
				["Enabled"] = false,
				["Melees"] = false,
			}
		},
		["Visuals"] = {
			["FPSBoost"] = {
				["Enabled"] = false,
				["GFX"] = false,
				["Light"] = false,
				["Fog"] = false,
			}
		}
	}
end).andThen(function()
	LocalPlayer.entityadded:Connect(run)
	run()
end)

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local Window = Rayfield:CreateWindow({
	Name = "Memer Hub",
	LoadingTitle = "Over Powered Hub",
	LoadingSubtitle = "By zestycodes",
	ConfigurationSaving = {
		Enabled = true,
		FolderName = "MemerHub",
		FileName = tostring(game.PlaceId)
	},
	KeySystem = false,
	KeySettings = {
		Title = "Memer Hub",
		Subtitle = "Key for Memer Hub.",
		Note = "Use this key to access to an overpowered script. (Small features, yet still op)",
		SaveKey = true,
		Key = "ABCDEF"
	}
})

local comb = Window:CreateTab("Combat", 0)
local blat = Window:CreateTab("Blatant", 0)
local misc = Window:CreateTab("Misc", 0)
local rend = Window:CreateTab("Render", 0)

function notif(content)
	if hideNotifications ~= nil and hideNotifications == true then
		return
	end
	return Rayfield:Notify("Memer Hub", content)
end

function button(Tab, title, callback)
	return Tab:CreateButton({
		Name = title,
		Callback = callback,
	})
end

function toggle(Tab, title, default, flag, callback)
	return Tab:CreateToggle({
		Name = title,
		CurrentValue = default,
		Flag = flag,
		Callback = callback,
	})
end

function slider(Tab, title, default, suffix, increment, range, flag, callback)
	return Tab:CreateSlider({
		Name = title,
		Range = range,
		Increment = increment,
		Suffix = suffix,
		CurrentValue = increment,
		Flag = flag,
		Callback = callback,
	})
end

function dropdown(Tab, title, options, default, flag, callback)
	return Tab:CreateDropdown({
		Name = title,
		Options = options,
		CurrentOption = default,
		Flag = flag,
		Callback = callback,
	})
end

function bypassedDelete(obj)
	spawn(function()
		obj.Parent = (gethui and gethui() or game.CoreGui) or game.ReplicatedFirst
		wait(1)
		obj:Destroy()
	end)
end

comb:CreateLabel("Aiming")

dropdown(comb, "Body Part", {"Head", "HumanoidRootPart", "UpperTorso", "LowerTorso"}, "LowerTorso", "bodyPart", function(b)
	memer.Combat.Aiming.Bodypart = b
	notif("Aimbot now aims for "..b.."!")
end)

slider(comb, "Prediction", 1, "", 1, {1, 8}, "Prediction", function(value)
	if value == 1 then
		memer.Combat.Aiming.Prediction = 0.33
	elseif value == 2 then
		memer.Combat.Aiming.Prediction = 0.127621
	elseif value == 3 then
		memer.Combat.Aiming.Prediction = 0.115211
	elseif value == 4 then
		memer.Combat.Aiming.Prediction = 0.125910
	elseif value == 5 then
		memer.Combat.Aiming.Prediction = 0.129145
	elseif value == 6 then
		memer.Combat.Aiming.Prediction = 0.129327
	elseif value == 7 then
		memer.Combat.Aiming.Prediction = 0.130169
	elseif value == 8 then
		memer.Combat.Aiming.Prediction = 0.135699
	end
end)

toggle(comb, "AutoPredict", false, "AutomaticPrediction",function(x)
	memer.Combat.Aiming.AutoPredict = x
	if tostring(x) == "true" then
		notif("Memer hub now automically predicts!")
	else
		notif("Memer hub no longer automically predicts!")
	end
end)

toggle(comb, "WallCheck", true, "WallCheck",function(x)
	memer.Combat.Aiming.WallCheck = x
	if tostring(x) == "true" then
		notif("Aimbot now checks for walls hiding the target!")
	else
		notif("Aimbot no longer checks for walls hiding the target!")
	end
end)

local cursortoggle = false

toggle(comb, "Use Cursor", true, "MoveCursor", function(x)
	cursortoggle = x
	if tostring(x) == "true" then
		notif("Aimbot now uses your cursor to aim!")
	elseif tostring(x) == "false" then
		notif("Aimbot no longer uses your cursor to aim!")
	end
end)


toggle(comb, "Jump Prediction", true, "JumpPrediction",function(x)
	memer.Combat.Aiming.IgnoreYVelocity = x
	if tostring(x) == "true" then
		notif("Aimbot now uses XZ axis!")
	else
		notif("Aimbot now uses XYZ axis!")
	end
end)

game:GetService("RunService")["Stepped"]:Connect(function(t,dt)
	local ping = tonumber(game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString(math.round(2/t)):split(" ")[1]:split(".")[1])
	if memer.Combat.Aiming.AutoPredict == true then
		if ping > 30 then
			memer.Combat.Aiming.Prediction = 0.33
		elseif ping > 40 then
			memer.Combat.Aiming.Prediction = 0.115211
		elseif ping > 50 then
			memer.Combat.Aiming.Prediction = 0.127621
		elseif ping > 60 then
			memer.Combat.Aiming.Prediction = 0.125910
		elseif ping > 70 then
			memer.Combat.Aiming.Prediction = 0.129145
		elseif ping > 80 then
			memer.Combat.Aiming.Prediction = 0.129569
		elseif ping > 90 then
			memer.Combat.Aiming.Prediction = 0.130579
		elseif ping > 100 then
			memer.Combat.Aiming.Prediction = 0.135699
		elseif ping > 110 then
			memer.Combat.Aiming.Prediction = 0.139790
		elseif ping > 120 then
			memer.Combat.Aiming.Prediction = 0.139998
		end
	end
end)

comb:CreateLabel("Aimbot")

toggle(comb,"Aimbot",false,"Aimbot",function(x)
	memer.Combat.Aimlock.Enabled = x
	if tostring(x) == "true" then
		notif("Aimbot is now enabled! (Click Q to aim, click Q again to cancel)")
	else
		notif("Aimbot is now disabled!")
	end
end)

comb:CreateLabel("Bypassed")

button(comb, "GodMode" , function()
	notif("If you will have a ping spike, and someone attacks you then you will get kicked by the anticheat.")
	loadstring(game:HttpGet"https://raw.githubusercontent.com/fa899/Memer/main/extra/hoodmodded/godmode.lua")()
end

button(comb, "Anonymous", function()
	if LocalPlayer.isalive == true then
		local char = LocalPlayer.entity
		bypassedDelete(char:FindFirstChildWhichIsA("Humanoid"):FindFirstChildWhichIsA("HumanoidDescription"))
		bypassedDelete(char:FindFirstChildWhichIsA("Pants"))
		bypassedDelete(char:FindFirstChildWhichIsA("Shirt"))
		bypassedDelete(char:FindFirstChildWhichIsA("RightUpperLeg"))
		bypassedDelete(char:FindFirstChildWhichIsA("BodyColors"))
		for _, child in pairs(char:GetChildren()) do
			if child:IsA("Accessory") then
				for _, desc in pairs(child:GetDescendants()) do
					if desc.ClassName:lower():find("part") then
						for _, x in pairs(desc:GetDescendants()) do
							bypassedDelete(x)
						end
					end
					bypassedDelete(desc)
				end
			end
		end
		notif("Success!")
	else
		notif("Your character requires to be alive to run this!")
	end
end)

blat:CreateLabel("Speed")
toggle(blat, "Toggle Speed", false, "Speed",function(x)
	memer.Blatant.Speed.Enabled = x
	if tostring(x) == "true" then
		notif("Speed is now enabled!")
	else
		notif("Speed is now disabled!")
	end
end)
slider(blat, "Speed", 6, "studs per second", 0.1, {1, 10}, "SpeedSpeed", function(x)
	memer.Blatant.Speed.Speed = x
end)
dropdown(blat, "Mode", {"NoPrediction", "Heatseeker", "CFrame", "CFrameOG", "Showcase", "Velocity"}, "Showcase", "SpeedMode", function(b)
	memer.Blatant.Speed.Type = b
	notif("Speed type is now "..b.."!")
end)

rend:CreateLabel("Camera")
slider(rend, "FOV", 70, "Field Of View", 0.1, {70, 120}, "FoV", function(b)
	workspace.CurrentCamera.FieldOfView = b
end)
toggle(rend, "X-Ray", false, "Xray", function(b)
	if b == true then
		LocalPlayer.instance.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Invisicam
		notif("X-RAY", "X-Ray enabled! (now your camera can go through walls)")
	elseif b == false then
		LocalPlayer.instance.DevCameraOcclusionMode = Enum.DevCameraOcclusionMode.Zoom
		notif("X-RAY", "X-Ray disabled!")
	end
end)

Rayfield:LoadConfiguration()
notif("Successfuly loaded!")

function getprediction(part)
	return part.Position + ((memer.Combat.Aiming.IgnoreYVelocity == false and part.Velocity or memer.Combat.Aiming.IgnoreYVelocity == true and Vector3.new(part.Velocity.X, 0, part.Velocity.Z)) * memer.Combat.Aiming.Prediction)
end

local function updateMouse(target)
	if not target then return end
	local Mouse = game.Players.LocalPlayer:GetMouse()

	local posVector3 = workspace.CurrentCamera:WorldToScreenPoint(target)
	local x, y = posVector3.X - Mouse.X, posVector3.Y - Mouse.Y

	if math.abs(x) > 4 then
		x = math.sign(x) * math.max(math.sqrt(math.abs(x)), 4)
	end
	if math.abs(y) > 4 then
		y = math.sign(y) * math.max(math.sqrt(math.abs(y)), 4)
	end

	if isKrnl then
		if x < 0 then
			x = x + 1 + 0xFFFFFFFF
		end
		if y < 0 then
			y = y + 1 + 0xFFFFFFFF
		end
	end

	(mousemoverel or mouse_move_rel or mousemove_rel or mouse_moverel)(x, y)
end

local aimlocking = false

game:GetService("UserInputService").InputBegan:Connect(function(ip)
	if ip.KeyCode == Enum.KeyCode.Q then
		aimlocking = not aimlocking
		if aimlocking == true then
			Target = GetNearestPerson()
		elseif aimlocking == false then
			Target = nil
		end
	end
end)

game["Run Service"].Stepped:Connect(function(t,dt)
	if aimlocking == true then
		if Target == nil then aimlocking = false else
			local tohit = Target["Character"]:FindFirstChild(bodypart)
			if tohit then
				if cursortoggle == true then
					updateMouse(getprediction(tohit))
				elseif cursortoggle == false then
					workspace.CurrentCamera.CFrame = CFrame.lookAt(workspace.CurrentCamera.CFrame.Position, getprediction(tohit))
				end
			else end
		end
	end
	if LocalPlayer.isalive == true and memer.Blatant.Speed.Enabled == true then
		local movedir = LocalPlayer.entity.Humanoid.MoveDirection
		local velo = LocalPlayer.entity.PrimaryPart.Velocity
		if memer.Blatant.Speed.Type == "CFrame" then
			LocalPlayer.entity:TranslateBy(movedir*memer.Blatant.Speed.Speed)
		elseif memer.Blatant.Speed.Type == "CFrameOG" then
			LocalPlayer.entity:TranslateBy(movedir*(math.random(2,4)+memer.Blatant.Speed.Speed))
		elseif memer.Blatant.Speed.Type == "Velocity" then
			LocalPlayer.entity.PrimaryPart.Velocity = movedir * (150 + memer.Blatant.Speed.Speed)
		end
	end
end)

spawn(function()
	while wait() do
		if LocalPlayer.isalive == true and memer.Blatant.Speed.Enabled == true then
			local character = LocalPlayer.entity
			if memer.Blatant.Speed.Type == "Heatseeker" then
				for i = 1, 4 do
					task.wait(0.01)
					local COUNT = (memer.Blatant.Speed.Speed > 9) and 8 or memer.Blatant.Speed.Speed
					character:TranslateBy(character.Humanoid.MoveDirection*(COUNT+(i-0.5)))
				end
				for i = 4, 0, -1 do
					task.wait(0.01)
					local COUNT = (memer.Blatant.Speed.Speed > 9) and 8 or memer.Blatant.Speed.Speed
					character:TranslateBy(character.Humanoid.MoveDirection*(COUNT+(i-0.5)))
				end
			elseif memer.Blatant.Speed.Type == "NoPrediction" then
				character:TranslateBy(character.Humanoid.MoveDirection*(math.random(-1,5)+(memer.Blatant.Speed.Speed-1)))
			end
		end
	end
end)

while wait() do
	local Speed = 1
	if memer.Blatant.Speed.Enabled == true and memer.Blatant.Speed.Type == "Showcase" then
		if LocalPlayer.isalive == true then
			for i = 1, 10 do
				Speed = Speed + 1
				LocalPlayer.entity:TranslateBy(LocalPlayer.entity:FindFirstChildWhichIsA("Humanoid").MoveDirection * Speed)
				wait(.12)
			end
			for i = 1, 10 do
				Speed = Speed - 1
				LocalPlayer.entity:TranslateBy(LocalPlayer.entity:FindFirstChildWhichIsA("Humanoid").MoveDirection * Speed)
				wait(.12)
			end
		end
	end
end                                                                                                                                                                                                                                                                                                                             
